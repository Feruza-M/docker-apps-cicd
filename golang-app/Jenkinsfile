pipeline {
    agent any

    parameters {
        choice(name: 'DEPLOY_ENV', choices: ['dev', 'stage', 'prod'])
        string(name: 'EXTERNAL_PORT', defaultValue: '8081')
        string(name: 'INTERNAL_PORT', defaultValue: '8080')
    }

    environment {
        IMAGE_NAME = "docferuza2024/golang-app"
        APP_NAME   = "My Go App"
        VERSION    = "2.0.0"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build & Push Docker Image') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: '99860c26-cd17-45a6-839a-a8ac5a718201',
                    usernameVariable: 'USER',
                    passwordVariable: 'PASS'
                )]) {
                    sh """
                        echo \$PASS | docker login -u \$USER --password-stdin
                        docker build -t \$IMAGE_NAME:\$DEPLOY_ENV ./golang-app
                        docker push \$IMAGE_NAME:\$DEPLOY_ENV
                    """
                }
            }
        }

        stage('Run & Test') {
            steps {
                sh """
                    # Удаляем старый контейнер, если есть
                    docker rm -f go-app-test 2>/dev/null || true

                    # Запускаем новый контейнер
                    docker run -d --name go-app-test \\
                        -p \$EXTERNAL_PORT:\$INTERNAL_PORT \\
                        -e APP_NAME="\$APP_NAME" \\
                        -e ENVIRONMENT="\$DEPLOY_ENV" \\
                        -e VERSION="\$VERSION" \\
                        -e PORT="\$INTERNAL_PORT" \\
                        \$IMAGE_NAME:\$DEPLOY_ENV

                    sleep 5

                    curl -f http://localhost:\$EXTERNAL_PORT/ || exit 1
                    curl -f http://localhost:\$EXTERNAL_PORT/health || exit 1

                    # Останавливаем и удаляем тестовый контейнер
                    docker rm -f go-app-test
                """
            }
        }
    }
}

